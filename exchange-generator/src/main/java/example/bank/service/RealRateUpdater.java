package example.bank.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import jakarta.annotation.PostConstruct;
import reactor.core.publisher.Mono;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class RealRateUpdater {

    @Value("${exchange.api-url}")
    private String apiUrl;

    @Value("${exchange.target-url}")
    private String targetUrl;

    private final WebClient webClient = WebClient.create();

    private static final List<String> CURRENCIES = List.of("RUB", "USD", "EUR");

    @PostConstruct
    public void init() {
        log.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        updateRatesFromApi();
    }

    // üîÅ –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    @Scheduled(fixedRateString = "${exchange.update-interval-ms:60000}")
    public void updateRatesFromApi() {
        log.info("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...");

        webClient.get()
                .uri(apiUrl)
                .retrieve()
                .bodyToMono(Map.class) // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Map
                .flatMap(response -> extractAndSendRates((Map<String, Object>) response))
                .onErrorResume((Throwable e) -> {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {}", e.getMessage());
                    return Mono.empty();
                })
                .subscribe();
    }

    private Mono<Void> extractAndSendRates(Map<String, Object> response) {
        try {
            Map<String, Object> ratesMap = (Map<String, Object>) response.get("rates");
            if (ratesMap == null) {
                log.warn("–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'rates'");
                return Mono.empty();
            }

            List<Map<String, Object>> converted = new ArrayList<>();

            for (String currency : CURRENCIES) {
                if (!ratesMap.containsKey(currency))
                    continue;
                double value = ((Number) ratesMap.get(currency)).doubleValue(); // –≤–∞–∂–Ω–æ: Number -> double
                double inverse = 1 / value;

                converted.add(Map.of(
                        "currency", currency,
                        "buy", BigDecimal.valueOf(inverse).setScale(2, RoundingMode.HALF_UP),
                        "sell", BigDecimal.valueOf(inverse * 1.01).setScale(2, RoundingMode.HALF_UP)));
            }

            log.info("üìà –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤ exchange-service: {}", converted);

            return webClient.post()
                    .uri(targetUrl)
                    .bodyValue(converted)
                    .retrieve()
                    .toBodilessEntity()
                    .then();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—Å–æ–≤: {}", e.getMessage());
            return Mono.empty();
        }
    }
}